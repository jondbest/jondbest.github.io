<html>
<head>
<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
<style>
html, body, #app {
  height: 100%;
}
body {
  background: #20262E;
  color: #fafafa;
  font-family: Open Sans,sans-serif;
  margin: 0;
}
a {
  text-decoration: none;
  color: #99f;
}
h6 {
  margin: .5rem auto;
}
strong {
  font-weight: 700;
}
#app {
  display: flex;
  transition: all 0.2s;
}
textarea {
  font-size: .9rem;
  width: 92%;
  height: 92%;
  border: none;
  border-radius: .1rem;
  box-shadow: .1rem .1rem .5rem rgba(0,0,0,.1);
  resize: none;
  padding: .25rem .5rem;
  margin: 0 auto;
  display: flex;
}
.col {
  display: inline-flex;
  flex-direction: column;
  width: 50%;
}
</style>
  <body>
    <div id="app">
      <div class="col">
        <h6>convert <strong>{{langIn}}</strong></h6>
        <textarea placeholder="paste some code here" v-model="input"></textarea>
      </div>
      <div class="col">
        <h6>to <strong>{{langOut}}</strong> <small><a href="#">...edit dictionary</a></small></h6>
        <textarea v-model="output"></textarea>
      </div>
    </div>
  <script>
var row = '';
var if_terminator = '';
var each_terminator = '';
class RpgLine {
  constructor(rawText) {
    this.cmd = rawText.substr(35,5).trim(); // command
    this.f1 = this.repl(rawText.substr(25,10).trim()); // factor 1
    this.f2 = this.repl(rawText.substr(40,10).trim()); // factor 2
    this.result = this.repl(rawText.substr(50,8).trim()); // result
    this.i1 = rawText.substr(58,9).trim(); // indicator 1
    this.i2 = rawText.substr(67,20).trim(); // indicator 2
    this.id = rawText.substr(0,7).trim(); // indicator 2
    this.type = rawText.substr(16,2)==='--'?'header':rawText.substr(14,1)==='*'?'comment':rawText.substr(13,1)==='C'?'code':'other';
    this.comment = function(){
    	switch(this.cmd.toLowerCase()) {
      	case 'endif': return '/* end if */';
      	case 'enddo': return '/* end while */';
      	case 'endsr': return '/* end function */';
      }
      return;
    }
  }
  get js() {
    let endline = ';';// `; /* ${this.id} */`;
  	switch (this.cmd.toLowerCase()) {
      case 'chain': // load specific fields into variable
      case 'klist': // define field array, end after last kfld
      case 'kfld': // define field in field array
      case 'setll': // set cursor at first record
      case 'endsr': // end subroutine
      case 'enddo': // end while
      case 'endif': // end if
      {
      	return;
      }
    	case "movel":
    	case "move":
    	case "z-add": {
        return `${formatVar(this.result)} = ${formatVar(this.f2)}${endline}`;
      }
    	case "add": {
        return `${formatVar(this.result)} += ${formatVar(this.f2)}${endline}`;
      }
    	case "z-sub": {
        return `${formatVar(this.result)} = -(${formatVar(this.f2)})${endline}`;
      }
    	case "sub": {
        if(this.f1){
        	return `${formatVar(this.result)} = ${formatVar(this.f1)} - ${formatVar(this.f2)}${endline}`;
        }
        return `${formatVar(this.result)} -= ${formatVar(this.f2)}${endline}`;
      }
    	case "doueq": {
      	return `while (${formatVar(this.f1)} !== ${formatVar(this.f2)}`;
        //return `while (${formatVar(this.f1)} !== ${formatVar(this.f2)}`;
      }
    	case "doweq": {
        return `while (${formatVar(this.f1)} === ${formatVar(this.f2)}`;
      }
    	case "ifeq": {
      	if (this.f2 === 'true')
        	return `if (${formatVar(this.f1)}`;
        else if (this.f2 === 'false')
        	return `if (!${formatVar(this.f1)}`;
        return `if (${formatVar(this.f1)} === ${formatVar(this.f2)}`;
      }
    	case "ifne": {
        return `if (${formatVar(this.f1)} !== ${formatVar(this.f2)}`;
      }
    	case "ifgt": {
        return `if (${formatVar(this.f1)} > ${formatVar(this.f2)}`;
      }
    	case "ifge": {
        return `if (${formatVar(this.f1)} >= ${formatVar(this.f2)}`;
      }
    	case "iflt": {
        return `if (${formatVar(this.f1)} < ${formatVar(this.f2)}`;
      }
    	case "ifle": {
        return `if (${formatVar(this.f1)} <= ${formatVar(this.f2)}`;
      }
    	case "andeq": {
      	if (this.f2 === 'true')
        	return `&& ${formatVar(this.f1)}`;
        else if (this.f2 === 'false')
        	return `&& !${formatVar(this.f1)}`;
        return `&& ${formatVar(this.f1)} === ${formatVar(this.f2)}`;
      }
    	case "andne": {
        return `&& ${formatVar(this.f1)} !== ${formatVar(this.f2)}`;
      }
    	case "andgt": {
        return `&& ${formatVar(this.f1)} > ${formatVar(this.f2)}`;
      }
    	case "andge": {
        return `&& ${formatVar(this.f1)} >= ${formatVar(this.f2)}`;
      }
    	case "andlt": {
        return `&& ${formatVar(this.f1)} < ${formatVar(this.f2)}`;
      }
    	case "andle": {
        return `&& ${formatVar(this.f1)} <= ${formatVar(this.f2)}`;
      }
    	case "oreq": {
      	if (this.f2 === 'true')
        	return `|| ${formatVar(this.f1)}`;
        else if (this.f2 === 'false')
        	return `|| !${formatVar(this.f1)}`;
        return `|| ${formatVar(this.f1)} === ${formatVar(this.f2)}`;
      }
    	case "orne": {
        return `|| ${formatVar(this.f1)} !== ${formatVar(this.f2)}`;
      }
    	case "orgt": {
        return `|| ${formatVar(this.f1)} > ${formatVar(this.f2)}`;
      }
    	case "orge": {
        return `|| ${formatVar(this.f1)} >= ${formatVar(this.f2)}`;
      }
    	case "orlt": {
        return `|| ${formatVar(this.f1)} < ${formatVar(this.f2)}`;
      }
    	case "orle": {
        return `|| ${formatVar(this.f1)} <= ${formatVar(this.f2)}`;
      }
    	case "exsr": {
        return `$${this.f2}()${endline}`;
      }
    	case "begsr": {
        return `function ${this.f1}() {`;
      }
      case "else": {
        return `} else {`;
      }
//      case "endsr": {
//        return `} /* end function */`;
//      }
//      case "enddo": {
//        return `} /* end while */`;
//      }
//      case "endif": {
//        return `} /* end if */`;
//      }
      case "reade": {
        row = `row->`;
        return `$table${this.i1} = $conn->query('SELECT * FROM ${this.f2}');`;
      	//return `foreach ($conn->query('SELECT * FROM ${this.f2}') as $${this.f2}) {`;
      }
      case "write": // table insert
      case "updat": // table update
      {
        row = '';
        return `${formatVar(this.f2)}.save();`; // hooray for es6 template literals
      }
      default: {
        return (this.result?formatVar(this.result) + " = ":"") + this.cmd + "('"+this.f1+"','"+this.f2+"','"+this.i1+"','"+this.i2+"')"+endline;
      }
    }
  }
  repl(str) {
    return str.replace('*ZEROS','0').replace('*BLANKS',"''").replace('*.IN','$table').replace('#','_').replace('*','_').replace('$','_');
  }
}
new Vue({
  el: "#app",
  data: {
    input: "",
    langIn: "RPG",
    langOut: "Eloquent PHP",
    comment: `/*~~~TODO:
  - prepend $ or $row-> to all variable names, e.g. CURDATE to $CURDATE and ID to $row->ID
  - pass row objects to functions if applicable, e.g. getitems() to getitems($row) and function getitems() to function getitems($parentrows)
  - change table aliases to table names, e.g. $addressfields to $customer
~~~*/`+"\n"
  },
  computed: {
  	output: function(){
      //if(this.input.includes('100      F')){
      if(this.input)
      	return this.comment + parse(this.input);
      	//return this.comment + this.parserpg(this.input);
      //} else {
      //	return this.rpg2js(this.input);
      //}
    }
  },
  methods: {
  	convert: function(input) {
      let output = [];
      let lines = input.split('\n');
    	lines.forEach(function(line){
          let fields = [];
          if(line.substr(14,1)==='*'){//comment
            if(line.substr(16,1)!=="-" && line.substr(15,10).trim().length>0){ output.push('/* '+line.substr(15,30).trim()+' */');
            }
          } else {
            //let js = self.rpg2js(line.substr(25,40));
            let js = new RpgLine(line).js;
            if(js){
              //if(js.includes('_IN')) js = '/* ' + js + ' */'; else
              if(js.startsWith('if') || js.startsWith('while')) {
              	if(if_terminator) {
                  js = if_terminator + js;
                }
              	if_terminator = ") {\n";
              }
              else if(if_terminator && !js.startsWith('&&') && !js.startsWith('||')){
                js = if_terminator + js;
                if_terminator = '';
              }
              else if(js.startsWith('foreach') && !js.startsWith('}')) {
              	if(each_terminator) {
                  js = each_terminator + js;
                }
              	each_terminator = "} /* end foreach */\n";
              }
              else if(each_terminator && (js.startsWith('foreach') || js.startsWith('function'))){
                js = each_terminator + js;
                each_terminator = '';
              }
              output.push(js);            
            }
          }
      });
      //return output.join("\n") + each_terminator//.replace(/\s/g,'');
      return 'asdf';
    },
  	parseit: function(input) {
    	let output = [];
    	let txtblock = this.comment;
      let lines = input.split('\n');
      lines.forEach(function (line) {
        let rpgLine = new RpgLine(line);
        if(rpgLine.type === 'code' && !rpgLine.cmd.startsWith('K') && !rpgLine.cmd.startsWith('SET')){
        	switch(rpgLine.cmd.substr(0,2)) {
          	case 'EN':
            	output.push('} ' + rpgLine.comment);
              return output.join("\n");
          	case 'IF':
            case 'DO':
            case 'BE':
            {
            	output.push(this.parse(rpgLine.js));
            }
          }
      		output.push(rpgLine.js);
          }
      });
      return output.join("\n");
    	//while(txtblock) {
      //	txtblock = lines.forEach(line => this.convert(line));
      //}
      //let lines = input.split('\n');
    	//let str = lines.forEach(line => this.convert(line));
      //return str;
    },
  	parserpg: function(input){
      var self = this;
      let output = [];
      let lines = input.split('\n');
      lines.forEach(function(line){
      	if(line.substr(7,7).trim()==='C'){
          let fields = [];
          if(line.substr(14,1)==='*'){//comment
            if(line.substr(16,1)!=="-" && line.substr(15,10).trim().length>0){ output.push('/* '+line.substr(15,30).trim()+' */');
            }
          } else {
            //let js = self.rpg2js(line.substr(25,40));
            let js = new RpgLine(line).js;
            if(js){
              //if(js.includes('_IN')) js = '/* ' + js + ' */'; else
              if(js.startsWith('if') || js.startsWith('while')) {
              	if(if_terminator) {
                  js = if_terminator + js;
                }
              	if_terminator = ") {\n";
              }
              else if(if_terminator && !js.startsWith('&&') && !js.startsWith('||')){
                js = if_terminator + js;
                if_terminator = '';
              }
              else if(js.startsWith('foreach') && !js.startsWith('}')) {
              	if(each_terminator) {
                  js = each_terminator + js;
                }
              	each_terminator = "} /* end foreach */\n";
              }
              else if(each_terminator && (js.startsWith('foreach') || js.startsWith('function'))){
                js = each_terminator + js;
                each_terminator = '';
              }
              output.push(js);            
            }
          }
        }
      });
      return output.join("\n") + each_terminator//.replace(/\s/g,'');
    },
    rpg2js: function(text){
      this.patterns.forEach(function(item){
        let rex = new RegExp(item.pattern, 'gi');
      	text = text.replace(rex, item.output)
      });
      return text.trim();
    },
  }
});
function formatVar(str) {
  if(str === 'false' || str === 'true' || str.startsWith("'") || !isNaN(Number(str.substr(0,1))))
  	return str; // number, string or keyword
  else if(!str.startsWith('_'))
  	return `$${str}`; // variable name
  else
  	return `$${row}${str}`; // assume field
}
function parse(input) {
  let output = [];
  let txtblock = this.comment;
  let lines = input.split('\n');
  lines.forEach(function (line) {
    let rpgLine = new RpgLine(line);
    if(rpgLine.type === 'code' && !rpgLine.cmd.startsWith('K') && !rpgLine.cmd.startsWith('SET')){
      switch(rpgLine.cmd.substr(0,2)) {
        case 'EN':
          output.push('} ' + rpgLine.comment);
          return output.join("\n");
        case 'IF':
        case 'DO':
        case 'BE':
          {
            output.push(parse(rpgLine.js));
          }
      }
      output.push(rpgLine.js);
    }
  });
  return output.join("\n");
}
  </script>
</body>
</html>
